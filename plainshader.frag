#version 410 core

in vec3 normal;
in vec4 color;
out vec4 fragmentColor;
in vec3 fragPos;

uniform float ambientStrength = 0.3f;
uniform vec4 ambientColor = vec4(1, 1, 1, 0);

uniform float lightStrength = 0.7;

struct DirectionalLight
{
    vec3 color;
    float ambientIntensity;
    vec3 direction;
    float diffuseIntensity;
};

uniform DirectionalLight directionalLight;

uniform vec3 viewPos; // The position of the camera
uniform float specularStrength = 0.5f;

void main() {
    // Ambient
    vec4 ambient = vec4(directionalLight.color,1.0f) * directionalLight.ambientIntensity;

    // Diffuse
    float diffuseFactor = max(dot(normalize(normal), normalize(directionalLight.direction)),0.0f);
    vec4 diffuse = vec4(directionalLight.color,1.0f) * directionalLight.diffuseIntensity * diffuseFactor;

    // Specular

    vec3 viewDir = normalize(viewPos - fragPos);
    vec3 reflectDir = reflect(-directionalLight.direction, normal);

    // The last parameter here is important. The higher the power we raise this to...
    // ... the smaller the effect of the specular light.
    // The "light orb" generated by the specular light will be smaller, but brighter.
    // The smaller the power raised, the bigger, but also dimmer, this "light orb" will be.
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec4 specular = vec4(specularStrength * spec * directionalLight.color, 1.0);

    fragmentColor = (ambient + diffuse) * color + specular;   //color given to current fragment (pixel)
}
